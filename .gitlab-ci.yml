include:
  - project: gfbio/cicd
    file:
      - '.create_merge_request.yml'

stages:
  - create_merge_request
  - lint
  - test
  - update_stage

variables:
  POSTGRES_USER: 'collection_service'
  POSTGRES_PASSWORD: ''
  POSTGRES_DB: 'test_collection_service'
  POSTGRES_HOST_AUTH_METHOD: trust
  CELERY_BROKER_URL: 'redis://redis:6379/0'
  DOCKER_TLS_CERTDIR: ''

create_merge_request:
  tags:
    - development-denbi

flake8:
  stage: lint
  image: python:3.9-alpine
  before_script:
    - pip install -q flake8
  script:
    - flake8
  tags:
    - col-svc

pytest:
  stage: test
  image: docker/compose:1.29.2
  tags:
    - col-svc
  services:
    - docker:dind
  before_script:
    - docker-compose -f local.yml build
    # Ensure celerybeat does not crash due to non-existent tables
    - docker-compose -f local.yml run --rm django python manage.py migrate
    - docker-compose -f local.yml up -d
  script:
    - docker-compose -f local.yml run django pytest

update_staging:
  stage: update_stage
  tags:
    - col-svc-shell
  script:
    - rm -r .envs && cp -r /home/gitlab-runner/.envs/ .envs
    - sed -i "s/VERSION =.*/VERSION ='$(git describe --tags | egrep -o '[0-9]+\.[0-9]+\.[0-9]+')'/g" config/settings/base.py
    - docker-compose -f staging.yml build
    - docker-compose -f staging.yml up -d postgres
    - docker-compose -f staging.yml run --rm postgres backup
    - docker-compose -f staging.yml run --rm django python manage.py migrate
    - docker-compose -f staging.yml down
    - docker-compose -f staging.yml up -d