include:
  - project: gfbio/cicd
    file:
      - '.create_merge_request_v2.yml'

stages:
  - create_merge_request
  - lint
  - test
  - update_stage
  - web_test_stop
  - web_test_update

variables:
  POSTGRES_USER: 'collection_service'
  POSTGRES_PASSWORD: ''
  POSTGRES_DB: 'test_collection_service'
  POSTGRES_HOST_AUTH_METHOD: trust
  CELERY_BROKER_URL: 'redis://redis:6379/0'
  DOCKER_TLS_CERTDIR: ''

create_merge_request:
  tags:
    - development-denbi

flake8:
  stage: lint
  image: python:3.9-alpine
  before_script:
    - pip install -q flake8
  script:
    - flake8
  tags:
    - col-svc

pytest:
  stage: test
  image: docker/compose:1.29.2
  tags:
    - col-svc
  services:
    - docker:dind
  before_script:
    - docker-compose -f local.yml build
    # Ensure celerybeat does not crash due to non-existent tables
    - docker-compose -f local.yml run --rm django python manage.py migrate
    - docker-compose -f local.yml up -d
  script:
    - docker-compose -f local.yml run django pytest


web_test_stop:
  variables:
    MAIN_BRANCH_NAME: "master"
    PROJECT_NAME: "collection_service"  
  before_script:
    # Install curl
    - apt-get update -qqq && apt-get install -qqqy curl
    # Get required script
    - curl -s -o web_test_stop.py --header "PRIVATE-TOKEN:${PRIVATE_TOKEN}" "https://gitlab.gwdg.de/api/v4/projects/18403/repository/files/scripts%2Fweb_test_stop.py/raw?ref=main"
    # Set permissions
    - chmod +x web_test_stop.py
  script:
    # extract issue-id from commit message
    - ISSUE_ID=$(awk '{print $3}' <<< ${CI_COMMIT_MESSAGE} | awk -F- '{print $2}' | sed s/\'//g | tr '\n' ' ' | awk '{print $1}')
    - TEST_NAME=$ISSUE_ID-$PROJECT_NAME
    - docker stack rm $TEST_NAME || true
  rules:
    - if: '$CI_COMMIT_BRANCH == $MAIN_BRANCH_NAME && $CI_COMMIT_MESSAGE =~ /.*Merge branch.*\w+-\d+.*into.*/'
  tags:
    - dev-denbi


web_test_check:
  stage: web_test_check
  before_script:
    # Install curl
    - apt-get update -qqq && apt-get install -qqqy curl
    # Get required script
    - curl -s -o web_test_check.sh --header "PRIVATE-TOKEN:${PRIVATE_TOKEN}" "https://gitlab.gwdg.de/api/v4/projects/18403/repository/files/scripts%2Fweb_test_check_v2.sh/raw?ref=jira"
    # Set permissions
    - chmod +x web_test_check.sh
  script:
    - HOST=${CI_PROJECT_URL} CI_PROJECT_ID=${CI_PROJECT_ID} CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME} PRIVATE_TOKEN=${PRIVATE_TOKEN} ./web_test_check_v2.sh
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^\w+-\d+-/'
  artifacts:
    reports:
      dotenv: web_test_check.env
  tags:
    - dev-denbi


web_test_update:
  stage: web_test_update
  needs: ["web_test_check"]
  dependencies:
    - web_test_check
  variables:
    PROJECT_NAME: $CI_PROJECT_ID
    COMPOSE_FILE: "web-test.yml"
    GIT_SUBMODULE_STRATEGY: normal
  before_script:
    - echo "IS_WEBTEST $IS_WEBTEST"
    - if [ -n "$IS_WEBTEST" ]; then if [ "$IS_WEBTEST" == "false" ]; then echo "skipping web test update" && exit 0; fi; else echo "skipping web test update" && exit 0; fi;
  script:
    - ISSUE_ID=$(awk -F- '{print $2}' <<< ${CI_COMMIT_REF_NAME})
    - TEST_NAME=$ISSUE_ID-$PROJECT_NAME
    - docker stack rm $TEST_NAME || true
    - while [[ $(docker ps | grep $TEST_NAME | wc -l) > 0 ]]; do sleep 1; done
    - sed -i s/BRANCH/$CI_COMMIT_REF_NAME/g $COMPOSE_FILE
    - sed -i "s/VERSION =.*/VERSION ='$(git describe --tags | egrep -o '[0-9]+\.[0-9]+\.[0-9]+')'/g" config/settings/base.py
    - sed -i s/DJANGO_ALLOWED_HOSTS=.*/DJANGO_ALLOWED_HOSTS=\.collections\.gfbio\.dev/g .envs/.production/.django
    - docker stack deploy -c $COMPOSE_FILE $TEST_NAME
  environment:
    name: review/$CI_COMMIT_REF_NAME
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^\w+-\d+-/'
  tags:
    - dev-denbi


update_staging:
  stage: update_stage
  tags:
    - col-svc-shell
  script:
    - rm -r .envs && cp -r /home/gitlab-runner/.envs/ .envs
    - sed -i "s/VERSION =.*/VERSION ='$(git describe --tags | egrep -o '[0-9]+\.[0-9]+\.[0-9]+')'/g" config/settings/base.py
    - docker-compose -f staging.yml build
    - docker-compose -f staging.yml up -d postgres
    - docker-compose -f staging.yml run --rm postgres backup
    - docker-compose -f staging.yml run --rm django python manage.py migrate
    - docker-compose -f staging.yml down
    - docker-compose -f staging.yml up -d
  environment:
    name: staging
    url: https://collections.gfbio.dev/
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
